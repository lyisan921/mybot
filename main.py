from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    CHOOSING, AGE, HEIGHT, WEIGHT, GENDER, ACTIVITY, GOAL,
    CALORIE_CHOICE,
    TEST_START, TEST_Q1, TEST_Q2, TEST_Q3, TEST_Q4, TEST_Q5,
    TEST_RESULT,
    INFO_MAIN, INFO_WORK, INFO_PRICES, INFO_QUESTIONS
) = range(19)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ (chat_id -> score)
test_score = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu_keyboard = [
    ['üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å', 'üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ª–∏—á–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è'],
    ['‚ùì –£–∑–Ω–∞—Ç—å –ø—Ä–æ –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ']
]

main_menu_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True, one_time_keyboard=True)

# --- /start ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π!\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£\n"
        "üìù –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ª–∏—á–Ω–æ–º—É –≤–µ–¥–µ–Ω–∏—é\n"
        "üí¨ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=main_menu_markup
    )
    return CHOOSING

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é ---

async def choosing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text

    if text == 'üî¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å':
        await update.message.reply_text(
            "üéÇ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25)",
            reply_markup=ReplyKeyboardRemove()
        )
        return AGE

    elif text == 'üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ª–∏—á–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è':
        test_score[update.effective_chat.id] = 0
        await update.message.reply_text(
            "üìù –¢–µ—Å—Ç –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ª–∏—á–Ω–æ–º—É –≤–µ–¥–µ–Ω–∏—é\n\n"
            "–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º —Ç–µ–±–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–¥–æ–π–¥–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π.\n"
            "–û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ ‚Äî —Ç–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º üòä\n\n"
            "–ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å?",
            reply_markup=ReplyKeyboardMarkup([['‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']], resize_keyboard=True, one_time_keyboard=True)
        )
        return TEST_START

    elif text == '‚ùì –£–∑–Ω–∞—Ç—å –ø—Ä–æ –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ':
        return await info_main(update, context)

    elif text == 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ' or text == 'üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return await start(update, context)

    else:
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòÖ\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu_markup
        )
        return CHOOSING

# --- –í–µ—Ç–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ ---

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if not text.isdigit() or not (10 <= int(text) <= 100):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 10 –¥–æ 100 –ª–µ—Ç")
        return AGE
    context.user_data['age'] = int(text)
    await update.message.reply_text("üìè –£–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö\n–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 165)")
    return HEIGHT

async def height(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if not text.isdigit() or not (50 <= int(text) <= 250):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç 50 –¥–æ 250 —Å–º")
        return HEIGHT
    context.user_data['height'] = int(text)
    await update.message.reply_text("‚öñÔ∏è –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö\n–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 60)")
    return WEIGHT

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if not text.isdigit() or not (20 <= int(text) <= 300):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 20 –¥–æ 300 –∫–≥")
        return WEIGHT
    context.user_data['weight'] = int(text)
    keyboard = [['üë© –ñ–µ–Ω—Å–∫–∏–π', 'üë® –ú—É–∂—Å–∫–æ–π']]
    await update.message.reply_text(
        "üë§ –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:\n–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return GENDER

async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text not in ['üë© –ñ–µ–Ω—Å–∫–∏–π', 'üë® –ú—É–∂—Å–∫–æ–π']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫")
        return GENDER
    context.user_data['gender'] = '–∂–µ–Ω—Å–∫–∏–π' if '–ñ–µ–Ω—Å–∫–∏–π' in text else '–º—É–∂—Å–∫–æ–π'

    keyboard = [
        ['ü™ë –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π (–æ—Ñ–∏—Å, –º–∏–Ω–∏–º—É–º —Å–ø–æ—Ä—Ç–∞)'],
        ['üö∂‚Äç‚ôÄÔ∏è –õ—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)'],
        ['üèÉ‚Äç‚ôÄÔ∏è –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)'],
        ['üèãÔ∏è‚Äç‚ôÄÔ∏è –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ —Ñ–∏–∑. —Ä–∞–±–æ—Ç–∞)']
    ]
    await update.message.reply_text(
        "üèÉ‚Äç‚ôÄÔ∏è –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–æ—Ä–∏—è—Ö",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return ACTIVITY

async def activity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    levels = {
        'ü™ë –º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π (–æ—Ñ–∏—Å, –º–∏–Ω–∏–º—É–º —Å–ø–æ—Ä—Ç–∞)': 1.2,
        'üö∂‚Äç‚ôÄÔ∏è –ª—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é)': 1.375,
        'üèÉ‚Äç‚ôÄÔ∏è —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é)': 1.55,
        'üèãÔ∏è‚Äç‚ôÄÔ∏è –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ —Ñ–∏–∑. —Ä–∞–±–æ—Ç–∞)': 1.725
    }
    text = update.message.text.strip().lower()
    if text not in levels:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞")
        return ACTIVITY
    context.user_data['activity'] = levels[text]

    keyboard = [['üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ', '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞', 'üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã']]
    await update.message.reply_text(
        "üéØ –ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?\n–í—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Å—Ç—Ä–µ–º–∏—à—å—Å—è",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return GOAL

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    goals = {'üìâ –ø–æ—Ö—É–¥–µ–Ω–∏–µ': '–ø–æ—Ö—É–¥–µ–Ω–∏–µ', '‚öñÔ∏è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞': '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ', 'üìà –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã': '–Ω–∞–±–æ—Ä'}
    text = update.message.text.strip().lower()
    if text not in goals:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞")
        return GOAL
    context.user_data['goal'] = goals[text]

    # –†–∞—Å—á–µ—Ç—ã
    age = context.user_data['age']
    height = context.user_data['height']
    weight = context.user_data['weight']
    gender = context.user_data['gender']
    activity = context.user_data['activity']

    if gender == '–∂–µ–Ω—Å–∫–∏–π':
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age + 5

    tdee = int(bmr * activity)

    # –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø–æ —Ü–µ–ª—è–º
    calories_map = {
        '–ø–æ—Ö—É–¥–µ–Ω–∏–µ': tdee - 300,
        '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ': tdee,
        '–Ω–∞–±–æ—Ä': tdee + 300
    }
    context.user_data['calories_map'] = calories_map

    keyboard = [
        [f"üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ: {calories_map['–ø–æ—Ö—É–¥–µ–Ω–∏–µ']} –∫–∫–∞–ª (–¥–µ—Ñ–∏—Ü–∏—Ç 300 –∫–∫–∞–ª)"],
        [f"‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ: {calories_map['–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ']} –∫–∫–∞–ª"],
        [f"üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã: {calories_map['–Ω–∞–±–æ—Ä']} –∫–∫–∞–ª (–ø—Ä–æ—Ñ–∏—Ü–∏—Ç 300 –∫–∫–∞–ª)"]
    ]
    await update.message.reply_text(
        f"üí° –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
        f"üìä –¢–≤–æ–π –±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º: {int(bmr)} –∫–∫–∞–ª\n"
        f"üî• –î–Ω–µ–≤–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å: {tdee} –∫–∫–∞–ª\n\n"
        f"–í—ã–±–µ—Ä–∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –ë–ñ–£:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return CALORIE_CHOICE

def calc_bju(calories: int):
    prot = round(calories * 0.3 / 4)
    fat = round(calories * 0.225 / 9)
    carb = round(calories * 0.475 / 4)
    return prot, fat, carb

async def calorie_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip().lower()
    calories_map = context.user_data.get('calories_map', {})
    found = False
    for goal, cal in calories_map.items():
        if goal in text:
            prot, fat, carb = calc_bju(cal)
            await update.message.reply_text(
                f"üéâ –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!\n\n"
                f"üìä {goal.capitalize()}: {cal} –∫–∫–∞–ª/–¥–µ–Ω—å\n\n"
                f"ü•© –ë–µ–ª–∫–∏: {prot} –≥ (30%)\n"
                f"ü•ë –ñ–∏—Ä—ã: {fat} –≥ (22.5%)\n"
                f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carb} –≥ (47.5%)\n\n"
                f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                f"‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ 3-4 –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏\n"
                f"‚Ä¢ –ü–µ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã (30-35 –º–ª –Ω–∞ 1 –∫–≥ –≤–µ—Å–∞)\n"
                f"‚Ä¢ –í–∫–ª—é—á–∞–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤\n\n"
                f"–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Ç–æ–º, –∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —ç—Ç–∏—Ö —Ü–µ–ª–µ–π?",
                reply_markup=ReplyKeyboardMarkup([
                    ['üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ª–∏—á–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è', 'üí¨ –£–∑–Ω–∞—Ç—å –ø—Ä–æ –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ'],
                    ['üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ], resize_keyboard=True, one_time_keyboard=True)
            )
            found = True
            break
    if not found:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫")
        return CALORIE_CHOICE
    return CHOOSING

# --- –í–µ—Ç–∫–∞ —Ç–µ—Å—Ç–∞ –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å ---

async def test_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text == '‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç':
        await update.message.reply_text(
            "üç∞ –í–æ–ø—Ä–æ—Å 1/5\n\n–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Å—Ä—ã–≤–∞–µ—à—å—Å—è –Ω–∞ —Å–ª–∞–¥–∫–æ–µ –∏–ª–∏ –¥—Ä—É–≥—É—é \"–≤—Ä–µ–¥–Ω—É—é\" –µ–¥—É?",
            reply_markup=ReplyKeyboardMarkup([
                ['üòÖ –ß–∞—Å—Ç–æ (–ø–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)', 'ü§î –ò–Ω–æ–≥–¥–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)', 'üòå –†–µ–¥–∫–æ (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∏–ª–∏ —Ä–µ–∂–µ)']
            ], resize_keyboard=True, one_time_keyboard=True)
        )
        return TEST_Q1
    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' or text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await start(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu_markup
        )
        return CHOOSING

async def test_q1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answers = {
        'üòÖ —á–∞—Å—Ç–æ (–ø–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)': 2,
        'ü§î –∏–Ω–æ–≥–¥–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)': 1,
        'üòå —Ä–µ–¥–∫–æ (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∏–ª–∏ —Ä–µ–∂–µ)': 0
    }
    ans = update.message.text.strip().lower()
    if ans not in answers:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu_markup
        )
        return CHOOSING
    test_score[update.effective_chat.id] += answers[ans]
    await update.message.reply_text(
        "ü§Ø –í–æ–ø—Ä–æ—Å 2/5\n\n–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ —Ç—ã –≤—Å—ë –∑–Ω–∞–µ—à—å –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏, –Ω–æ –Ω–µ –º–æ–∂–µ—à—å –≤–Ω–µ–¥—Ä–∏—Ç—å –≤ –∂–∏–∑–Ω—å?",
        reply_markup=ReplyKeyboardMarkup([
            ['üòî –î–∞, –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è', 'ü§∑‚Äç‚ôÄÔ∏è –ù–µ—Ç, —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–Ω–∞–Ω–∏—è–º–∏']
        ], resize_keyboard=True, one_time_keyboard=True)
    )
    return TEST_Q2

async def test_q2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answers = {
        'üòî –¥–∞, –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è': 2,
        'ü§∑‚Äç‚ôÄÔ∏è –Ω–µ—Ç, —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–Ω–∞–Ω–∏—è–º–∏': 0
    }
    ans = update.message.text.strip().lower()
    if ans not in answers:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu_markup
        )
        return CHOOSING
    test_score[update.effective_chat.id] += answers[ans]
    await update.message.reply_text(
        "ü§ù –í–æ–ø—Ä–æ—Å 3/5\n\n–•–æ—á–µ—Ç—Å—è –ª–∏ —Ç–µ–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã?",
        reply_markup=ReplyKeyboardMarkup([
            ['üí™ –î–∞, –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'üôÖ‚Äç‚ôÄÔ∏è –ù–µ—Ç, —Å–ø—Ä–∞–≤–ª—é—Å—å —Å–∞–º(–∞)']
        ], resize_keyboard=True, one_time_keyboard=True)
    )
    return TEST_Q3

async def test_q3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answers = {
        'üí™ –¥–∞, –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞': 2,
        'üôÖ‚Äç‚ôÄÔ∏è –Ω–µ—Ç, —Å–ø—Ä–∞–≤–ª—é—Å—å —Å–∞–º(–∞)': 0
    }
    ans = update.message.text.strip().lower()
    if ans not in answers:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu_markup
        )
        return CHOOSING
    test_score[update.effective_chat.id] += answers[ans]
    await update.message.reply_text(
        "üìä –í–æ–ø—Ä–æ—Å 4/5\n\n–ì–æ—Ç–æ–≤(–∞) –ª–∏ —Ç—ã —Ç—Ä–∞—Ç–∏—Ç—å 2-3 –º–∏–Ω—É—Ç—ã –≤ –¥–µ–Ω—å –Ω–∞ –≤–µ–¥–µ–Ω–∏–µ –ø–∏—â–µ–≤–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ?",
        reply_markup=ReplyKeyboardMarkup([
            ['‚úÖ –î–∞, –≥–æ—Ç–æ–≤(–∞)', '‚ùå –ù–µ—Ç, —ç—Ç–æ –Ω–µ –¥–ª—è –º–µ–Ω—è']
        ], resize_keyboard=True, one_time_keyboard=True)
    )
    return TEST_Q4

async def test_q4(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answers = {
        '‚úÖ –¥–∞, –≥–æ—Ç–æ–≤(–∞)': 2,
        '‚ùå –Ω–µ—Ç, —ç—Ç–æ –Ω–µ –¥–ª—è –º–µ–Ω—è': 0
    }
    ans = update.message.text.strip().lower()
    if ans not in answers:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu_markup
        )
        return CHOOSING
    test_score[update.effective_chat.id] += answers[ans]
    await update.message.reply_text(
        "üéØ –í–æ–ø—Ä–æ—Å 5/5\n\n–£ —Ç–µ–±—è –µ—Å—Ç—å —á—ë—Ç–∫–∞—è, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ø–æ—Ö—É–¥–µ—Ç—å –Ω–∞ 5 –∫–≥ –∫ –ª–µ—Ç—É\" –≤–º–µ—Å—Ç–æ \"—Ö–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å\")",
        reply_markup=ReplyKeyboardMarkup([
            ['üéØ –î–∞, —Ü–µ–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è', 'ü§î –ù–µ—Ç, –ø–æ–∫–∞ —Ä–∞–∑–º—ã—Ç–æ']
        ], resize_keyboard=True, one_time_keyboard=True)
    )
    return TEST_Q5

async def test_q5(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answers = {
        'üéØ –¥–∞, —Ü–µ–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è': 2,
        'ü§î –Ω–µ—Ç, –ø–æ–∫–∞ —Ä–∞–∑–º—ã—Ç–æ': 0
    }
    ans = update.message.text.strip().lower()
    if ans not in answers:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu_markup
        )
        return CHOOSING
    test_score[update.effective_chat.id] += answers[ans]

    score = test_score[update.effective_chat.id]
    if score >= 6:
        await update.message.reply_text(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {score}/10\n\n"
            "–¢—ã –±–æ–ª—å—à–∞—è –º–æ–ª–æ–¥–µ—Ü –∏ –ø–æ—Ö–æ–∂–µ, —á—Ç–æ –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–º —à–∞–≥–æ–º –∫ —Ç–≤–æ–∏–º —Ü–µ–ª—è–º! \n\n"
            "–£ —Ç–µ–±—è –µ—Å—Ç—å:\n"
            "‚úÖ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Å–≤–æ–∏—Ö —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç\n"
            "‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π\n"
            "‚úÖ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ, –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥ –∫ —Å—Ä—ã–≤–∞–º –∏ –¥–æ–≤–µ—Å—Ç–∏ –¥–æ –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"
            "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—á–∞—Ç—å?",
            reply_markup=ReplyKeyboardMarkup([
                ['üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram: @iam_lsn', 'üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã'],
                ['üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ', 'üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
            ], resize_keyboard=True, one_time_keyboard=True)
        )
    else:
        await update.message.reply_text(
            f"üí™ –ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {score}/10\n\n"
            "–¢—ã —É–∂–µ –ø—Ä–æ–¥–µ–ª–∞–ª–∞ –±–æ–ª—å—à—É—é —Ä–∞–±–æ—Ç—É –∏ —É —Ç–µ–±—è —É–∂–µ –≤—Å—ë –ø–æ–ª—É—á–∞–µ—Ç—Å—è! \n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–π—á–∞—Å —Ç–µ–±–µ –±–æ–ª—å—à–µ –ø–æ–¥–æ–π–¥–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –∏ –ë–ñ–£.\n\n"
            "–ù–æ –µ—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º!",
            reply_markup=ReplyKeyboardMarkup([
                ['üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram: @iam_lsn', 'üìö –£–∑–Ω–∞—Ç—å –ø—Ä–æ –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ'],
                ['üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ', 'üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
            ], resize_keyboard=True, one_time_keyboard=True)
        )

    if update.effective_chat.id in test_score:
        del test_score[update.effective_chat.id]
    return CHOOSING

# --- –í–µ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—á–Ω–æ–º –≤–µ–¥–µ–Ω–∏–∏ ---

async def info_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        ['üìã –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–∞–±–æ—Ç–∞', 'üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã'],
        ['‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏'],
        ['üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    await update.message.reply_text(
        "üíé –õ–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n\n"
        "–†–∞–±–æ—Ç–∞—é —Å –∫–∞–∂–¥—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ ‚Äî –æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–≤—ã—á–µ–∫ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ù–∏–∫–∞–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤, —Ç–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏ –∏ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.\n\n"
        "üéØ –ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å —Ä–∞—Ü–∏–æ–Ω–æ–º\n"
        "‚Ä¢ –ó–Ω–∞–Ω–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏\n"
        "‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "üíª –§–æ—Ä–º–∞—Ç ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç –≤ Telegram:\n"
        "üó®Ô∏è –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–ø—Ä–æ—Å—ã\n"
        "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ–¥ —Ä—É–∫–æ–π\n"
        "üî• –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
        "–í—Å–µ —á–µ—Ç–∫–æ, –±–µ–∑ –ø—É—Ç–∞–Ω–∏—Ü—ã ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
        "–≠—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–∏–µ—Ç–∞.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return INFO_MAIN

async def info_work(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        ['üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã', '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    await update.message.reply_text(
        "üìã –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ:\n\n"
        "1. –ê–Ω–∫–µ—Ç–∞\n"
        "–ó–∞–ø–æ–ª–Ω—è–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∫–µ—Ç—É –æ –ø–∏—Ç–∞–Ω–∏–∏, –∑–¥–æ—Ä–æ–≤—å–µ, —Ü–µ–ª—è—Ö –∏ –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏\n\n"
        "2. –ê–Ω–∞–ª–∏–∑\n"
        "–ò–∑—É—á–∞—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã, –≤—ã—è–≤–ª—è—é –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n\n"
        "3. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω\n"
        "–ü–æ–ª—É—á–∞–µ—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –ö–ë–ñ–£ —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π\n\n"
        "4. –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n"
        "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\n\n"
        "5. –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏\n"
        "–†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤–Ω–æ—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
        "6. –†–∞–±–æ—Ç–∞ —Å –ø–∏—â–µ–≤—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏\n"
        "–†–∞–∑–±–∏—Ä–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã, –∑–∞–º–µ–Ω—è–µ–º –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ\n\n"
        "7. –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n"
        "–§–æ—Ä–º–∏—Ä—É–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞\n\n"
        "üíª –†–∞–±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–Ω–ª–∞–π–Ω",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return INFO_WORK

async def info_prices(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        ['üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram: @iam_lsn', '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    await update.message.reply_text(
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏—á–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è:\n\n"
        "üìÖ 1 –º–µ—Å—è—Ü ‚Äî 5000‚ÇΩ\n"
        "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è: –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –ø–æ–¥—Ö–æ–¥–æ–º, —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏\n\n"
        "üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äî 12000‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 3000‚ÇΩ, —Å–∫–∏–¥–∫–∞ 20%)\n"
        "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è: —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫, —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\n"
        "üìÖ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî 21000‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 9000‚ÇΩ, —Å–∫–∏–¥–∫–∞ 30%)\n"
        "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è: –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\n"
        "üéÅ –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤–æ –≤—Å–µ –ø–∞–∫–µ—Ç—ã:\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å —Ä–∞—Ü–∏–æ–Ω–æ–º\n"
        "‚Ä¢ –ó–Ω–∞–Ω–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏\n"
        "‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç –≤ Telegram\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Å–º–µ–ª–æ –ø–∏—à–∏!",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return INFO_PRICES

async def info_questions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        ['üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram: @iam_lsn'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    await update.message.reply_text(
        "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ó–∞–¥–∞–≤–∞–π!\n\n"
        "–¢—ã –º–æ–∂–µ—à—å:\n"
        "‚Ä¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö: @iamolsn\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ª–∏—á–Ω–æ –≤ Telegram: @iam_lsn\n\n"
        "–Ø –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –ø–æ–¥—Ö–æ–¥–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–º üòä",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return INFO_QUESTIONS

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---

async def info_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text

    if text == 'üìã –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ä–∞–±–æ—Ç–∞':
        return await info_work(update, context)
    elif text == 'üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã':
        return await info_prices(update, context)
    elif text == '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
        return await info_questions(update, context)
    elif text == 'üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏':
        test_score[update.effective_chat.id] = 0
        await update.message.reply_text(
            "üìù –¢–µ—Å—Ç –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ª–∏—á–Ω–æ–º—É –≤–µ–¥–µ–Ω–∏—é\n\n"
            "–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º —Ç–µ–±–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–¥–æ–π–¥–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π.\n"
            "–û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ ‚Äî —Ç–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º üòä\n\n"
            "–ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(
                [['‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return TEST_START
    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        return await info_main(update, context)
    elif text == 'üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return await start(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫")
        return INFO_MAIN


# --- –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ---

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await start(update, context)

# --- –ö–æ–º–∞–Ω–¥–∞ /stop ---

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üëã –ü–æ–∫–∞! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–º–æ—á—å —Ç–µ–±–µ!\n\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å:\n"
        "‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏ /start\n"
        "‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî –ø–∏—à–∏ –≤ Telegram: @iam_lsn\n\n"
        "–£–¥–∞—á–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π! üí™",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòÖ\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu_markup
    )
    return CHOOSING

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---

def main():
    app = ApplicationBuilder().token("5284761727:AAG5nQPZNpWLN4Gc3fCpYGtGBT83wYLNK0U").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choosing)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight)],
            GENDER: [MessageHandler(filters.Regex('^(üë© –ñ–µ–Ω—Å–∫–∏–π|üë® –ú—É–∂—Å–∫–æ–π)$'), gender)],
            ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, activity)],
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, goal)],
            CALORIE_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, calorie_choice)],

            TEST_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, test_start)],
            TEST_Q1: [MessageHandler(filters.TEXT & ~filters.COMMAND, test_q1)],
            TEST_Q2: [MessageHandler(filters.TEXT & ~filters.COMMAND, test_q2)],
            TEST_Q3: [MessageHandler(filters.TEXT & ~filters.COMMAND, test_q3)],
            TEST_Q4: [MessageHandler(filters.TEXT & ~filters.COMMAND, test_q4)],
            TEST_Q5: [MessageHandler(filters.TEXT & ~filters.COMMAND, test_q5)],

            INFO_MAIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, info_handler)],
            INFO_WORK: [MessageHandler(filters.TEXT & ~filters.COMMAND, info_handler)],
            INFO_PRICES: [MessageHandler(filters.TEXT & ~filters.COMMAND, info_handler)],
            INFO_QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, info_handler)],
        },
        fallbacks=[CommandHandler('stop', stop), CommandHandler('start', start)]
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.COMMAND, unknown))  # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

    app.run_polling()

if __name__ == '__main__':
    main()
